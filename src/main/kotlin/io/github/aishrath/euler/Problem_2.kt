package io.github.aishrath.euler

import java.math.BigInteger

/*
* Each new term in the Fibonacci sequence is generated by adding the previous two terms.
* By starting with 1 and 2, the first 10 terms will be:
*
* 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
*
* By considering the terms in the Fibonacci sequence whose values do not exceed four million,
* find the sum of the even-valued terms.
*/

fun main() {
    val evenFib = EvenFib()
    print(evenFib.sum())
}

class EvenFib {

    private val ans: MutableList<Int> = mutableListOf()

    fun sum(): Int {
        fib(BigInteger.ONE, BigInteger.valueOf(2), BigInteger.valueOf(100))
        return ans.filter { it % 2 == 0 }.sum()
    }

    private tailrec fun fib(a: BigInteger, b: BigInteger, n: BigInteger): BigInteger {
        val m = if (a.toString().length < 9) a.intValueExact() else 0
        if (m < 4_000_000) ans.add(m)
        return if (n == BigInteger.ZERO) a else fib(b, a + b, n - BigInteger.ONE)
    }
}
